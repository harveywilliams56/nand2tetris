// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Inc16.hdl

/**
 * 16-bit incrementer:
 * out = in + 1 (arithmetic addition)
 */

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
   // Put you code here:
   // The And`s are daisy-chained to detect the first 0 bit...
   // ... and remain 0 thereafter
   //
   //
   // Xor`s act as selectable negation (if a is 1, negate b; if a is 0, do not)
 
   Xor(a=true, b=in[0], out=out[0]);

   And(a=true, b=in[0], out=And0);
   Xor(a=And0, b=in[1], out=out[1]);
   
   And(a=And0, b=in[1], out=And1);
   Xor(a=And1, b=in[2], out=out[2]);

   And(a=And1, b=in[2], out=And2);
   Xor(a=And2, b=in[3], out=out[3]);

   And(a=And2, b=in[3], out=And3);
   Xor(a=And3, b=in[4], out=out[4]);

   And(a=And3, b=in[4], out=And4);
   Xor(a=And4, b=in[5], out=out[5]);

   And(a=And4, b=in[5], out=And5);
   Xor(a=And5, b=in[6], out=out[6]);

   And(a=And5, b=in[6], out=And6);
   Xor(a=And6, b=in[7], out=out[7]);

   And(a=And6, b=in[7], out=And7);
   Xor(a=And7, b=in[8], out=out[8]);

   And(a=And7, b=in[8], out=And8);
   Xor(a=And8, b=in[9], out=out[9]);

   And(a=And8, b=in[9], out=And9);
   Xor(a=And9, b=in[10], out=out[10]);

   And(a=And9, b=in[10], out=And10);
   Xor(a=And10, b=in[11], out=out[11]);

   And(a=And10, b=in[11], out=And11);
   Xor(a=And11, b=in[12], out=out[12]);

   And(a=And11, b=in[12], out=And12);
   Xor(a=And12, b=in[13], out=out[13]);

   And(a=And12, b=in[13], out=And13);
   Xor(a=And13, b=in[14], out=out[14]);

   And(a=And13, b=in[14], out=And14);
   Xor(a=And14, b=in[15], out=out[15]);
}

//Could be optimised by using Nand with a modified Xor but for the sake of clarity, I have not done this 
